version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: urban-it-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: urban_it_ledger
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - urban-it-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d urban_it_ledger"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: urban-it-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres123@db:5432/urban_it_ledger
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRES_IN: 7d
      FRONTEND_URL: http://localhost:5173
      SEED_DATABASE: "true"
    ports:
      - "3001:3001"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - urban-it-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    entrypoint: ["sh", "/app/docker-entrypoint.sh"]
    command: ["npm", "start"]

  # Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: urban-it-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:3001
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - urban-it-network
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:
    driver: local

networks:
  urban-it-network:
    driver: bridge